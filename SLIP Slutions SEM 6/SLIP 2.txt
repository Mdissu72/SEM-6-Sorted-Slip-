Q.1 Advanced Java:

âœ… A) JSP Program to Check Whether a Given Number is Perfect Using Include Directive
Directory Structure
bash

/perfectNumber
â”œâ”€â”€ /WEB-INF
â”‚   â””â”€â”€ web.xml
â”œâ”€â”€ /includes
â”‚   â””â”€â”€ checkPerfect.jsp
â””â”€â”€ index.jsp

index.jsp


<%@ page contentType="text/html; charset=UTF-8" language="java" %>
<html>
<head>
    <title>Perfect Number Checker</title>
</head>
<body>
    <h2>Enter a Number to Check Perfect Number:</h2>
    <form action="index.jsp" method="post">
        <input type="text" name="number" required>
        <input type="submit" value="Check">
    </form>

    <% 
        String numStr = request.getParameter("number");
        if (numStr != null) {
            int num = Integer.parseInt(numStr);
    %>
        <jsp:include page="includes/checkPerfect.jsp">
            <jsp:param name="num" value="<%= num %>" />
        </jsp:include>
    <% } %>
</body>
</html>
/includes/checkPerfect.jsp
jsp
Copy
Edit
<%@ page contentType="text/html; charset=UTF-8" language="java" %>
<%
    int num = Integer.parseInt(request.getParameter("num"));
    int sum = 0;
    for (int i = 1; i < num; i++) {
        if (num % i == 0) {
            sum += i;
        }
    }
    if (sum == num) {
        out.println("<h3>" + num + " is a Perfect Number.</h3>");
    } else {
        out.println("<h3>" + num + " is NOT a Perfect Number.</h3>");
    }
%>


âœ… Run Instructions:
Place all files in the webapps/perfectNumber directory.

Run Tomcat and access:


http://localhost:8080/perfectNumber/index.jsp


âœ… B) Java Program in Multithreading Using Applet to Draw a Flag
FlagApplet.java

import java.applet.*;
import java.awt.*;
import java.util.Random;

public class FlagApplet extends Applet implements Runnable {
    private Thread t;
    private boolean flagUp = true;

    public void init() {
        t = new Thread(this);
        t.start();
    }

    public void paint(Graphics g) {
        // Draw flag outline
        g.drawRect(100, 100, 200, 150);

        // Draw stripes using multithreading
        drawStripe(g, Color.ORANGE, 100, 100, 200, 50);
        drawStripe(g, Color.WHITE, 100, 150, 200, 50);
        drawStripe(g, Color.GREEN, 100, 200, 200, 50);

        // Draw Ashoka Chakra
        g.setColor(Color.BLUE);
        g.drawOval(175, 150, 50, 50);

        if (flagUp) {
            g.drawString("Flag is UP", 150, 300);
        } else {
            g.drawString("Flag is DOWN", 150, 300);
        }
    }

    public void drawStripe(Graphics g, Color color, int x, int y, int width, int height) {
        g.setColor(color);
        g.fillRect(x, y, width, height);
    }

    public void run() {
        try {
            while (true) {
                flagUp = !flagUp;
                repaint();
                Thread.sleep(1000);
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}


âœ… HTML to Run Applet

<!DOCTYPE html>
<html>
<head>
    <title>Flag Drawing Applet</title>
</head>
<body>
    <h2>Indian Flag with Multithreading</h2>
    <applet code="FlagApplet.class" width="400" height="400"></applet>
</body>
</html>


ðŸ“± Q.2 Android:

âœ… A) Android Application to Demonstrate Life Cycle of Activity
MainActivity.java

package com.example.lifecycleapp;

import android.os.Bundle;
import android.util.Log;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {

    private static final String TAG = "LifeCycleDemo";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        Log.d(TAG, "onCreate() called");
    }

    @Override
    protected void onStart() {
        super.onStart();
        Log.d(TAG, "onStart() called");
    }

    @Override
    protected void onResume() {
        super.onResume();
        Log.d(TAG, "onResume() called");
    }

    @Override
    protected void onPause() {
        super.onPause();
        Log.d(TAG, "onPause() called");
    }

    @Override
    protected void onStop() {
        super.onStop();
        Log.d(TAG, "onStop() called");
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        Log.d(TAG, "onDestroy() called");
    }
}

activity_main.xml

<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <TextView
        android:id="@+id/textView"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Check Logcat for Activity Lifecycle"
        android:textSize="20sp"
        android:layout_centerInParent="true"/>
</RelativeLayout>

âœ… Logcat Output:


D/LifeCycleDemo: onCreate() called
D/LifeCycleDemo: onStart() called
D/LifeCycleDemo: onResume() called
D/LifeCycleDemo: onPause() called
D/LifeCycleDemo: onStop() called
D/LifeCycleDemo: onDestroy() called


âœ… B) Android Application Demonstrating DatePicker and DatePickerDialog

MainActivity.java

package com.example.datepickerapp;

import android.app.DatePickerDialog;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;
import java.util.Calendar;

public class MainActivity extends AppCompatActivity {
    Button selectDateBtn;
    TextView dateTextView;
    Calendar calendar;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        selectDateBtn = findViewById(R.id.selectDateBtn);
        dateTextView = findViewById(R.id.dateTextView);

        selectDateBtn.setOnClickListener(v -> showDatePicker());
    }

    private void showDatePicker() {
        calendar = Calendar.getInstance();
        int year = calendar.get(Calendar.YEAR);
        int month = calendar.get(Calendar.MONTH);
        int day = calendar.get(Calendar.DAY_OF_MONTH);

        DatePickerDialog datePickerDialog = new DatePickerDialog(
                MainActivity.this,
                (view, year1, month1, dayOfMonth) -> {
                    String selectedDate = dayOfMonth + "/" + (month1 + 1) + "/" + year1;
                    dateTextView.setText(selectedDate);
                },
                year, month, day
        );
        datePickerDialog.show();
    }
}

activity_main.xml

<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <Button
        android:id="@+id/selectDateBtn"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Select Date"
        android:layout_centerInParent="true"/>

    <TextView
        android:id="@+id/dateTextView"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Selected Date: "
        android:textSize="18sp"
        android:layout_below="@id/selectDateBtn"
        android:layout_centerHorizontal="true"
        android:layout_marginTop="20dp"/>
</RelativeLayout>
